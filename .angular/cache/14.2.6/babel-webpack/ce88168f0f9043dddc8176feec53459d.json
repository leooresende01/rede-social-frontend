{"ast":null,"code":"import { delayWhen, retryWhen, Subject, tap, timer } from 'rxjs';\nimport { webSocket } from 'rxjs/webSocket';\nimport { Alert } from 'src/model/alert';\nimport { AlertType } from 'src/model/alert-type';\nimport { MensagemForm } from '../dto/mensagem.form';\nimport { urlApi, wsUrl } from '../util/url-api';\nimport { MensagemDto } from './../dto/mensagem.dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/core/service/user-authenticate.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./../observable/alert.service\";\nexport let MensagemService = /*#__PURE__*/(() => {\n  class MensagemService {\n    constructor(userAuthService, http, alert) {\n      this.userAuthService = userAuthService;\n      this.http = http;\n      this.alert = alert;\n      this.wsUrl = wsUrl;\n      this.pathApi = \"/api/v1/chats\";\n      this.deconnect = new Subject();\n      this.configurarConexaoWS();\n    }\n\n    configurarConexaoWS() {\n      const token = this.userAuthService.pegarLoginDto()?.token;\n      this.conexaoWS = webSocket(`${this.wsUrl}/${token}`);\n    }\n\n    escutarMensagensDoServidor() {\n      this.reiniciarConexao();\n      const mensagemObservable = this.conexaoWS.asObservable();\n      return mensagemObservable.pipe(retryWhen(errors => errors.pipe(tap(e => {\n        this.alert.nextValue(new Alert('Conexão perdida, reconectando...', AlertType.DANGER));\n        this.deconnect.next(e);\n      }), delayWhen(val => timer(3000)))));\n    }\n\n    desconnectEvent() {\n      return this.deconnect.asObservable();\n    }\n\n    buscarMensagensComOUsuario(username) {\n      return this.http.get(`${urlApi}${this.pathApi}/${username}/mensagens`);\n    }\n\n    enviarMensagem(mensagem, outroUsuarioDoChat) {\n      const token = this.userAuthService.pegarLoginDto()?.token;\n      const usernameUsuarioAutenticado = this.userAuthService.pegarUsernameUsuarioAutenticado();\n      const mensagemForm = new MensagemForm(mensagem, outroUsuarioDoChat, token);\n      this.conexaoWS.next(mensagemForm);\n      return MensagemDto.mapearFormParaDto(mensagemForm, usernameUsuarioAutenticado);\n    }\n\n    fecharConexaoWebSocket() {\n      this.conexaoWS.complete();\n    }\n\n    reiniciarConexao() {\n      this.fecharConexaoWebSocket();\n      this.conexaoWS.unsubscribe();\n      this.configurarConexaoWS();\n    }\n\n  }\n\n  MensagemService.ɵfac = function MensagemService_Factory(t) {\n    return new (t || MensagemService)(i0.ɵɵinject(i1.UserAuthenticateService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AlertService));\n  };\n\n  MensagemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MensagemService,\n    factory: MensagemService.ɵfac,\n    providedIn: 'root'\n  });\n  return MensagemService;\n})();","map":null,"metadata":{},"sourceType":"module"}