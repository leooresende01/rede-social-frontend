{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { LoginDto } from \"../dto/login-dto\";\nimport { RefreshTokenDto } from './../dto/refresh-token.dto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./../observable/alert.service\";\nexport let UserAuthenticateService = /*#__PURE__*/(() => {\n  class UserAuthenticateService {\n    constructor(router, alertService) {\n      this.router = router;\n      this.alertService = alertService;\n      this.atributoLoginDtoNome = \"loginDto\";\n      this.usernameUsuarioAutenticado = 'usernameUsuarioAutenticado';\n    }\n\n    autenticarEIrParaAHome(loginDto, username, nextUrl = '/home') {\n      this.salvarLoginDto(loginDto);\n      localStorage.setItem(this.usernameUsuarioAutenticado, username);\n      this.router.navigateByUrl(nextUrl);\n      console.clear();\n    }\n\n    salvarLoginDto(loginDto) {\n      this.fazerLoggout();\n      const loginDtoSerializado = JSON.stringify(loginDto);\n      localStorage.setItem(this.atributoLoginDtoNome, loginDtoSerializado);\n    }\n\n    verificaSeOUsuarioEstaAuthenticado() {\n      try {\n        return !!this.pegarLoginDto();\n      } catch (e) {}\n\n      return false;\n    }\n\n    pegarLoginDto() {\n      const loginDtoSerializado = localStorage.getItem(this.atributoLoginDtoNome);\n\n      if (loginDtoSerializado) {\n        const obj = JSON.parse(loginDtoSerializado);\n        return LoginDto.mapearParaLoginDto(obj);\n      }\n\n      return null;\n    }\n\n    pegarHeaderAuthorization() {\n      try {\n        const loginDto = this.pegarLoginDto();\n        return new HttpHeaders({\n          Authorization: `${loginDto.authType} ${loginDto.token}`\n        });\n      } catch (e) {}\n\n      return new HttpHeaders();\n    }\n\n    pegarUsernameUsuarioAutenticado() {\n      try {\n        const loginDto = JSON.parse(localStorage.getItem(this.atributoLoginDtoNome));\n        const tokenParseado = this.descriptografarTokenJWT(loginDto.token);\n        return tokenParseado.sub;\n      } catch (e) {}\n\n      return '';\n    }\n\n    descriptografarTokenJWT(token) {\n      var base64Url = token.split('.')[1];\n      var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      return JSON.parse(jsonPayload);\n    }\n\n    refazerLoginCasoAtualizacaoDoTokenFalhar() {\n      this.fazerLoggout();\n      const url = this.router.url.split('?')[0];\n      this.router.navigate(['/'], {\n        replaceUrl: true,\n        queryParams: {\n          nextUrl: url\n        }\n      }); // this.alertService.nextValue(new Alert('Sessão expirada, necessário refazer o login', AlertType.WARNING));\n    }\n\n    fazerLoggout() {\n      localStorage.clear();\n    }\n\n    pegarRefreshToken() {\n      const loginDto = this.pegarLoginDto();\n      const refreshToken = loginDto?.refreshToken;\n      return new RefreshTokenDto(refreshToken);\n    }\n\n  }\n\n  UserAuthenticateService.ɵfac = function UserAuthenticateService_Factory(t) {\n    return new (t || UserAuthenticateService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AlertService));\n  };\n\n  UserAuthenticateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAuthenticateService,\n    factory: UserAuthenticateService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserAuthenticateService;\n})();","map":null,"metadata":{},"sourceType":"module"}