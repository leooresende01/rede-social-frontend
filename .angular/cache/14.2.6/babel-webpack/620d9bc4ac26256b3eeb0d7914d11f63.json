{"ast":null,"code":"import { outCred, inCred } from '../util/cred.util';\nimport { HttpResponse } from \"@angular/common/http\";\nimport * as crypto from \"crypto-js\";\nimport { filter, map } from \"rxjs\";\nimport { urlApi } from '../util/url-api';\nexport class AplicarEstrategiaInterceptor {\n  intercept(req, next) {\n    const url = req.url.replace(urlApi, '');\n    const metodoHttp = req.method;\n\n    if (this.verificaAUrl(url) && (metodoHttp === 'POST' || metodoHttp === 'PUT')) {\n      const requestCriptografada = crypto.AES.encrypt(JSON.stringify(req.body), outCred).toString();\n      const requestCryptoClone = req.clone({\n        body: {\n          payload: requestCriptografada\n        }\n      });\n      return this.aplicarEstrategias(next.handle(requestCryptoClone));\n    }\n\n    if (metodoHttp === \"DELETE\") {\n      return next.handle(req);\n    }\n\n    return this.aplicarEstrategias(next.handle(req));\n  }\n\n  verificaAUrl(url) {\n    return url !== '/api/v1/usuarios' && !new RegExp('/api/v1/usuarios/[A-Za-z0-9\\.]+/publicacoes$').test(url) && !new RegExp('/api/v1/usuarios/[A-Za-z0-9\\.]+$').test(url);\n  }\n\n  aplicarEstrategias(value) {\n    return value.pipe(filter(event => event instanceof HttpResponse)).pipe(map(event => this.resolverARequisicao(event)));\n  }\n\n  resolverARequisicao(event) {\n    const reqPay = event.body.payload;\n\n    if (reqPay) {\n      const bodyDescript = crypto.AES.decrypt(reqPay, inCred).toString(crypto.enc.Utf8).toString();\n      const body = JSON.parse(bodyDescript);\n      return event.clone({\n        body\n      });\n    }\n\n    return event;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}