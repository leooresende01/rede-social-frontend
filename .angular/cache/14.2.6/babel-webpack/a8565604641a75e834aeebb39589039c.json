{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction ValidatorsComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"O \", ctx_r0.inputName, \" deve ter no minimo 8 caracteres\");\n  }\n}\n\nfunction ValidatorsComponent_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"O \", ctx_r1.inputName, \" n\\u00E3o pode ter mais que 20 caracteres\");\n  }\n}\n\nfunction ValidatorsComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"O \", ctx_r2.inputName, \" tem caracteres invalidos\");\n  }\n}\n\nexport let ValidatorsComponent = /*#__PURE__*/(() => {\n  class ValidatorsComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  ValidatorsComponent.ɵfac = function ValidatorsComponent_Factory(t) {\n    return new (t || ValidatorsComponent)();\n  };\n\n  ValidatorsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ValidatorsComponent,\n    selectors: [[\"rs-validators\"]],\n    inputs: {\n      formGroup: \"formGroup\",\n      inputName: \"inputName\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"]],\n    template: function ValidatorsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ValidatorsComponent_p_0_Template, 2, 1, \"p\", 0);\n        i0.ɵɵtemplate(1, ValidatorsComponent_p_1_Template, 2, 1, \"p\", 0);\n        i0.ɵɵtemplate(2, ValidatorsComponent_p_2_Template, 2, 1, \"p\", 0);\n      }\n\n      if (rf & 2) {\n        let tmp_0_0;\n        let tmp_1_0;\n        let tmp_2_0;\n        i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx.formGroup.get(ctx.inputName)) == null ? null : tmp_0_0.hasError(\"minlength\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx.formGroup.get(ctx.inputName)) == null ? null : tmp_1_0.hasError(\"maxlength\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !((tmp_2_0 = ctx.formGroup.get(ctx.inputName)) == null ? null : tmp_2_0.hasError(\"minlength\")) && ((tmp_2_0 = ctx.formGroup.get(ctx.inputName)) == null ? null : tmp_2_0.hasError(\"pattern\")));\n      }\n    },\n    dependencies: [i1.NgIf],\n    styles: [\"p[_ngcontent-%COMP%]{font-size:13px;color:#dc3545;text-align:center;margin-bottom:7px}\"]\n  });\n  return ValidatorsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}