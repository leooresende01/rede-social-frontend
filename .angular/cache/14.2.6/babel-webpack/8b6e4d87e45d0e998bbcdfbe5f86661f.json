{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Maria S\\xF4nia/Documents/Workspace-Node/rede-social/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { from, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user-authenticate.service\";\nimport * as i2 from \"./../service/login.service\";\nexport class AtualizarTokenInterceptor {\n  constructor(userAuthService, loginService) {\n    this.userAuthService = userAuthService;\n    this.loginService = loginService;\n  }\n\n  intercept(req, next) {\n    const usuarioEstaAutenticado = this.userAuthService.verificaSeOUsuarioEstaAuthenticado();\n    console.log(usuarioEstaAutenticado);\n\n    try {\n      if (usuarioEstaAutenticado) {\n        return from(this.atualizarRequestComTokenNovo(req)).pipe(switchMap(reqClone => next.handle(reqClone)));\n      }\n    } catch (e) {}\n\n    return next.handle(req);\n  }\n\n  atualizarRequestComTokenNovo(req) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const novaRequestComTokenAtualizado = req.clone();\n      const loginDto = yield _this.loginService.atualizarToken();\n\n      _this.userAuthService.salvarLoginDto(loginDto);\n\n      novaRequestComTokenAtualizado.headers.set('authorization', `${loginDto.authType} ${loginDto.token}`);\n      return novaRequestComTokenAtualizado;\n    })();\n  }\n\n}\n\nAtualizarTokenInterceptor.ɵfac = function AtualizarTokenInterceptor_Factory(t) {\n  return new (t || AtualizarTokenInterceptor)(i0.ɵɵinject(i1.UserAuthenticateService), i0.ɵɵinject(i2.LoginService));\n};\n\nAtualizarTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AtualizarTokenInterceptor,\n  factory: AtualizarTokenInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAkDC,WAAlD,QAAqE,sBAArE;AAEA,SAASC,IAAT,EAA2BC,SAA3B,QAA4C,MAA5C;;;;AAKA,OAAM,MAAOC,yBAAP,CAAgC;EACrCC,YAAoBC,eAApB,EACSC,YADT,EACmC;IADf;IACX;EAA+B;;EAExCC,SAAS,CAACC,GAAD,EAAwBC,IAAxB,EAAyC;IACjD,MAAMC,sBAAsB,GAAG,KAAKL,eAAL,CAAqBM,kCAArB,EAA/B;IACAC,OAAO,CAACC,GAAR,CAAYH,sBAAZ;;IACA,IAAI;MACH,IAAIA,sBAAJ,EAA4B;QAC3B,OAAOT,IAAI,CAAC,KAAKa,4BAAL,CAAkCN,GAAlC,CAAD,CAAJ,CACNO,IADM,CACDb,SAAS,CAACc,QAAQ,IAAIP,IAAI,CAACQ,MAAL,CAAYD,QAAZ,CAAb,CADR,CAAP;MAEA;IACD,CALD,CAKE,OAAOE,CAAP,EAAU,CAAE;;IACd,OAAOT,IAAI,CAACQ,MAAL,CAAYT,GAAZ,CAAP;EAEA;;EAEaM,4BAA4B,CAACN,GAAD,EAAsB;IAAA;;IAAA;MAC/D,MAAMW,6BAA6B,GAAGX,GAAG,CAACY,KAAJ,EAAtC;MACA,MAAMC,QAAQ,SAAS,KAAI,CAACf,YAAL,CAAkBgB,cAAlB,EAAvB;;MACA,KAAI,CAACjB,eAAL,CAAqBkB,cAArB,CAAoCF,QAApC;;MACAF,6BAA6B,CAACK,OAA9B,CAAsCC,GAAtC,CAA0C,eAA1C,EAA2D,GAAGJ,QAAQ,CAACK,QAAQ,IAAIL,QAAQ,CAACM,KAAK,EAAjG;MACA,OAAOR,6BAAP;IAL+D;EAM/D;;AAvBoC;;;mBAAzBhB,2BAAyByB;AAAA;;;SAAzBzB;EAAyB0B,SAAzB1B,yBAAyB;EAAA2B,YADZ","names":["HttpEvent","HttpHandler","HttpRequest","from","switchMap","AtualizarTokenInterceptor","constructor","userAuthService","loginService","intercept","req","next","usuarioEstaAutenticado","verificaSeOUsuarioEstaAuthenticado","console","log","atualizarRequestComTokenNovo","pipe","reqClone","handle","e","novaRequestComTokenAtualizado","clone","loginDto","atualizarToken","salvarLoginDto","headers","set","authType","token","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Maria Sônia\\Documents\\Workspace-Node\\rede-social\\src\\core\\interceptor\\atualizar-token.interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { from, Observable, switchMap } from \"rxjs\";\r\nimport { UserAuthenticateService } from \"../service/user-authenticate.service\";\r\nimport { LoginService } from './../service/login.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AtualizarTokenInterceptor implements HttpInterceptor {\r\n\tconstructor(private userAuthService: UserAuthenticateService,\r\n\t\tprivate loginService: LoginService) { }\r\n\r\n\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\t\tconst usuarioEstaAutenticado = this.userAuthService.verificaSeOUsuarioEstaAuthenticado();\r\n\t\tconsole.log(usuarioEstaAutenticado);\r\n\t\ttry {\r\n\t\t\tif (usuarioEstaAutenticado) {\r\n\t\t\t\treturn from(this.atualizarRequestComTokenNovo(req))\r\n\t\t\t\t.pipe(switchMap(reqClone => next.handle(reqClone)));\r\n\t\t\t}\r\n\t\t} catch (e) {}\r\n\t\treturn next.handle(req);\r\n\r\n\t}\r\n\r\n\tprivate async atualizarRequestComTokenNovo(req: HttpRequest<any>) {\r\n\t\tconst novaRequestComTokenAtualizado = req.clone();\r\n\t\tconst loginDto = await this.loginService.atualizarToken();\r\n\t\tthis.userAuthService.salvarLoginDto(loginDto);\r\n\t\tnovaRequestComTokenAtualizado.headers.set('authorization', `${loginDto.authType} ${loginDto.token}`);\r\n\t\treturn novaRequestComTokenAtualizado;\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}