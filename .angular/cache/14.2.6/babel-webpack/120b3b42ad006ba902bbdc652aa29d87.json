{"ast":null,"code":"import { HttpErrorResponse, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { BehaviorSubject, catchError, filter, switchMap, take, throwError } from \"rxjs\";\nimport verificarSeUmaRotaEhProtegida from \"../util/verificar-rotas-protegidas.util\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user-authenticate.service\";\nimport * as i2 from \"../service/login.service\";\nconst TOKEN_HEADER_KEY = 'Authorization';\nexport let AdicionarOuAtualizarTokenInterceptor = /*#__PURE__*/(() => {\n  class AdicionarOuAtualizarTokenInterceptor {\n    constructor(userAuthService, loginService) {\n      this.userAuthService = userAuthService;\n      this.loginService = loginService;\n      this.isRefreshing = false;\n      this.refreshTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(req, next) {\n      if (!verificarSeUmaRotaEhProtegida(req)) return next.handle(req);\n      const token = this.userAuthService.pegarLoginDto()?.token;\n\n      if (token) {\n        req = this.addTokenHeader(req, token);\n      }\n\n      return next.handle(req).pipe(catchError(error => {\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          return this.atualizarToken(req, next);\n        }\n\n        return throwError(error);\n      }));\n    }\n\n    atualizarToken(request, next) {\n      const tokenRefresh = this.userAuthService.pegarRefreshToken().refreshToken;\n\n      if (!this.isRefreshing) {\n        this.isRefreshing = true;\n        this.refreshTokenSubject.next(null);\n\n        if (tokenRefresh) {\n          return this.loginService.atualizarToken().pipe(switchMap(loginDto => {\n            this.isRefreshing = false;\n            this.userAuthService.salvarLoginDto(loginDto);\n            this.refreshTokenSubject.next(loginDto.token);\n            return next.handle(this.addTokenHeader(request, loginDto.token));\n          }), catchError(err => {\n            this.isRefreshing = false;\n            this.userAuthService.refazerLoginCasoAtualizacaoDoTokenFalhar();\n            return throwError(err);\n          }));\n        }\n      }\n\n      if (!tokenRefresh) {\n        this.isRefreshing = false;\n        this.userAuthService.refazerLoginCasoAtualizacaoDoTokenFalhar();\n      }\n\n      return this.refreshTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => next.handle(this.addTokenHeader(request, token))));\n    }\n\n    addTokenHeader(request, token) {\n      return request.clone({\n        headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n      });\n    }\n\n  }\n\n  AdicionarOuAtualizarTokenInterceptor.ɵfac = function AdicionarOuAtualizarTokenInterceptor_Factory(t) {\n    return new (t || AdicionarOuAtualizarTokenInterceptor)(i0.ɵɵinject(i1.UserAuthenticateService), i0.ɵɵinject(i2.LoginService));\n  };\n\n  AdicionarOuAtualizarTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdicionarOuAtualizarTokenInterceptor,\n    factory: AdicionarOuAtualizarTokenInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AdicionarOuAtualizarTokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}