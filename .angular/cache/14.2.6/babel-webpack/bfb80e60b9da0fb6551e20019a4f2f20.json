{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest, HttpResponse } from \"@angular/common/http\";\nimport * as crypto from \"crypto-js\";\nimport { filter, map } from \"rxjs\";\nimport { inCred, outCred } from '../util/cred.util';\nimport { urlApi } from '../util/url-api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n\nfunction ehUmJsonValido(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport let AplicarEstrategiaInterceptor = /*#__PURE__*/(() => {\n  class AplicarEstrategiaInterceptor {\n    constructor(router) {\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      const url = req.url.replace(urlApi, '');\n      const metodoHttp = req.method;\n\n      if (this.verificaAUrl(url) && (metodoHttp === 'POST' || metodoHttp === 'PUT')) {\n        const requestCriptografada = crypto.AES.encrypt(JSON.stringify(req.body), outCred).toString();\n        const requestCryptoClone = req.clone({\n          body: {\n            payload: requestCriptografada\n          }\n        });\n        return this.aplicarEstrategias(next.handle(requestCryptoClone));\n      }\n\n      if (metodoHttp === \"DELETE\" || !ehUmJsonValido(req.body) && this.router.url !== '/home/editarInformacoes') {\n        return next.handle(req);\n      }\n\n      return this.aplicarEstrategias(next.handle(req));\n    }\n\n    verificaAUrl(url) {\n      return url !== '/api/v1/usuarios' && !new RegExp('chats').test(url) && !new RegExp('/api/v1/usuarios/[A-Za-z0-9\\.]+/publicacoes$').test(url) && !new RegExp('/api/v1/usuarios/[A-Za-z0-9\\.]+$').test(url);\n    }\n\n    aplicarEstrategias(value) {\n      return value.pipe(filter(event => event instanceof HttpResponse)).pipe(map(event => this.resolverARequisicao(event)));\n    }\n\n    resolverARequisicao(event) {\n      const reqPay = event.body.payload;\n\n      if (reqPay) {\n        const bodyDescript = crypto.AES.decrypt(reqPay, inCred).toString(crypto.enc.Utf8).toString();\n        const body = JSON.parse(bodyDescript);\n        return event.clone({\n          body\n        });\n      }\n\n      return event;\n    }\n\n  }\n\n  AplicarEstrategiaInterceptor.ɵfac = function AplicarEstrategiaInterceptor_Factory(t) {\n    return new (t || AplicarEstrategiaInterceptor)(i0.ɵɵinject(i1.Router));\n  };\n\n  AplicarEstrategiaInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AplicarEstrategiaInterceptor,\n    factory: AplicarEstrategiaInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AplicarEstrategiaInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}